import logging
import select
import pyorient
import time
import random

from topology import nodes, edges

from multiprocessing import Process, Queue

listenTo = ['alert']
name = 'PrioSimAlertContext'

class PlugIn (Process):

    def __init__(self, q, dbs):
        Process.__init__(self)
        self.subscribe = q[listenTo[0] + '_' + name]
        self.client = pyorient.OrientDB(dbs.server, dbs.port)
        self.session_id = self.client.connect(dbs.user, dbs.pwd)
        self.client.db_open(dbs.database, dbs.user, dbs.pwd)

    def stop(self):
        logging.info( 'Stopped "{0}"'.format(self.__module__) )
        self.client.db_close()

    def getPrioVal(self, contextRid):

        newContextPrio = 0
        alertCounter = 0

        queries = ["SELECT EXPAND(IN('alertToContext')) from alertcontext where @RID = " + contextRid, "SELECT EXPAND(IN('ContextToContext')) from alertcontext where @RID = " + contextRid ]

        for query in queries:

            result = self.client.query(query,-1)
                        
            for entry in result:
                prioAlert = entry.oRecordData['_prio']
                if prioAlert != None:
                    newContextPrio = newContextPrio + int(prioAlert)
                    alertCounter = alertCounter + 1
        
                    
        newPrioValue = newContextPrio / alertCounter
    
        ret = int(round(newPrioValue,0))

        return ret

    def update(self, rid, value, key):
        UpdateResult = self.client.command("Update alertcontext set " + key + " = " + str(value) + " where @RID = " + rid)
        # causes deleted egdes in alert context?
        #context.update(self.client)
        logging.info("Update Prio of alertContext %s with %s. (%s)", rid, value, UpdateResult)

    def run(self):

        logging.info( 'Start "{0}"'.format(self.__module__) )

        while (True):
            changed = self.subscribe.get()
            
            table = changed['table']
            operation = changed['operation']
            ident = changed['ident']
            logging.info( '"{0}" got incomming change ("{1}") "{2}" in "{3}"'.format(self.__module__, operation, changed['ident'], table) )
            

            if operation != 'update':
                logging.info("Skip Operation. - No Update Operation on Alert.")
                continue

            prioNew = changed['new']['_prio']
            prioOld = changed['original']['_prio']
            
            if prioNew == None or prioNew == prioOld:
                logging.info("No new Prio update. Skip Priorisation.")
            else:
                result = self.client.query("select EXPAND(OUT('alertToContext')) from alert where @RID = "+ident,-1)
                for elem in result:
                    contextRid = elem._rid

                    # Update directly connected alert Context
                    
                    contextPrio = self.getPrioVal(contextRid) 
                    self.update(contextRid, contextPrio, "_prio")
                    
                    
                    # update connected alert contexts
                    queryInner = "TRAVERSE OUT('ContextToContext') FROM " + contextRid
                    resultInner = self.client.query(queryInner,-1)
                    
                    for entry in resultInner:
                        if type(entry) is pyorient.otypes.OrientRecordLink:
                            alertContextID = entry.clusterID + ":" + entry.recordPosition
                        elif type(entry) is pyorient.otypes.OrientRecord:
                            alertContextID = entry._rid
                        else:
                            logging.warning("Unkown Return Type %s.", type(entry))
                            alertContextID = None

                        if alertContextID == contextRid:
                            continue

                        alertContextPrio = self.getPrioVal(alertContextID)
                        self.update(alertContextID, alertContextPrio, "_prio")


